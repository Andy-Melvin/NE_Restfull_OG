openapi: 3.0.0
info:
  title: Parking System API
  version: 1.0.0
  description: A modern RESTful API service for managing parking systems with authentication and reporting functionality

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, parking_attendant]

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, parking_attendant]

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
        password:
          type: string

    Parking:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        name:
          type: string
        numberOfSpaces:
          type: integer
        availableSpaces:
          type: integer
        location:
          type: string
        chargingFeePerHour:
          type: number
          format: float

    CreateParkingRequest:
      type: object
      required:
        - code
        - name
        - numberOfSpaces
        - location
        - chargingFeePerHour
      properties:
        code:
          type: string
        name:
          type: string
        numberOfSpaces:
          type: integer
        location:
          type: string
        chargingFeePerHour:
          type: number
          format: float

    CarParkingRecord:
      type: object
      properties:
        id:
          type: string
        plateNumber:
          type: string
        parkingCode:
          type: string
        entryTime:
          type: string
          format: date-time
        exitTime:
          type: string
          format: date-time
          nullable: true
        chargedAmount:
          type: number
          format: float
          nullable: true

    CarEntryRequest:
      type: object
      required:
        - plateNumber
        - parkingCode
      properties:
        plateNumber:
          type: string
          pattern: '^RA[A-Z] \d{3}[A-Z]$'
        parkingCode:
          type: string

    CarExitRequest:
      type: object
      required:
        - recordId
      properties:
        recordId:
          type: string

    ReportQuery:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        parkingCode:
          type: string

    Error:
      type: object
      properties:
        message:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /parking:
    post:
      tags:
        - Parking
      summary: Create a new parking (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParkingRequest'
      responses:
        '201':
          description: Parking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Parking
      summary: List all parkings (Public)
      responses:
        '200':
          description: List of parkings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Parking'

  /parking/stats/overview:
    get:
      tags:
        - Admin
      summary: Get parking statistics (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Parking statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                        name:
                          type: string
                        numberOfSpaces:
                          type: integer
                        availableSpaces:
                          type: integer
                        totalRecords:
                          type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /parking/stats/utilization:
    get:
      tags:
        - Admin
      summary: Get parking utilization (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Parking utilization data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                        name:
                          type: string
                        totalSpaces:
                          type: integer
                        availableSpaces:
                          type: integer
                        currentUtilization:
                          type: number
                        activeCars:
                          type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /parking/{id}:
    get:
      tags:
        - Parking
      summary: Get parking by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Parking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
        '404':
          description: Parking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Parking
      summary: Update parking
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParkingRequest'
      responses:
        '200':
          description: Parking updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
        '404':
          description: Parking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Parking
      summary: Delete parking
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Parking deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Parking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cars/entry:
    post:
      tags:
        - Cars
      summary: Register car entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarEntryRequest'
      responses:
        '201':
          description: Car entry recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CarParkingRecord'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cars/exit:
    post:
      tags:
        - Cars
      summary: Register car exit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarExitRequest'
      responses:
        '200':
          description: Car exit recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      recordId:
                        type: string
                      plateNumber:
                        type: string
                      totalHours:
                        type: number
                      chargedAmount:
                        type: number
                      exitTime:
                        type: string
                        format: date-time
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cars/active:
    get:
      tags:
        - Cars
      summary: Get active parking records
      responses:
        '200':
          description: List of active parking records
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CarParkingRecord'

  /reports/entries:
    get:
      tags:
        - Reports
      summary: Get car entry report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: parkingCode
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Car entry report
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CarParkingRecord'

  /reports/exits:
    get:
      tags:
        - Reports
      summary: Get car exit report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: parkingCode
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Car exit report
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CarParkingRecord'

  /reports/utilization:
    get:
      tags:
        - Reports
      summary: Get parking utilization report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: parkingCode
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Parking utilization report
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        parkingCode:
                          type: string
                        name:
                          type: string
                        totalSpaces:
                          type: integer
                        averageUtilization:
                          type: number
                        peakUtilization:
                          type: number 